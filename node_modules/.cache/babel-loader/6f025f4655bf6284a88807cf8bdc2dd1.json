{"ast":null,"code":"var _jsxFileName = \"/home/harish/mn9/repo/test/-MS_Imdb_Monoceros_Tep_Hyderabad_Part-time_2020_2/src/components/SeriesDetails.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport YouTube from '@u-wave/react-youtube';\nimport SeriesCast from './SeriesCast';\nexport default function SeriesDetails(props) {\n  const [seriesData, setSeriesData] = useState([]);\n  const [seriesVideo, setSeriesVideo] = useState(\"\");\n  const [seriesGenres, setSeriesGenres] = useState(\"\");\n  const [seriesTime, setSeriesTime] = useState(\"\");\n  const [seriesDate, setSeriesDate] = useState(\"\");\n  const [creators, setCreators] = useState([]);\n  useEffect(() => {\n    if (seriesData.length === 0) {\n      getData();\n      getSeriesVideo();\n    } //if movie changed\n\n\n    if (parseInt(seriesData.id) !== parseInt(props.id)) getData();\n    getSeriesVideo();\n  });\n\n  const getData = async () => {\n    const data = await axios.get(`https://api.themoviedb.org/3/tv/${props.id}?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8&language=en-US`);\n    setSeriesData(data.data);\n    const genres = [];\n    data.data.genres.splice(0, 2).map(genre => {\n      return genres.push(genre.name);\n    });\n    setSeriesGenres(genres);\n    setSeriesTime(convertTime(data.data.episode_run_time));\n    setSeriesDate(convertDate(data.data.first_air_date));\n    const creators = [];\n    data.data.created_by.splice(0, 3).map(person => {\n      return creators.push(person.name);\n    });\n    setCreators(creators);\n  };\n\n  const getSeriesVideo = async () => {\n    const data = await axios.get(`https://api.themoviedb.org/3/${props.type}/${props.id}/videos?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8&language=en-US`);\n    if (data.data.results[0].site === \"YouTube\") setSeriesVideo(data.data.results[0].key);\n  };\n\n  const convertTime = minute => {\n    minute = minute[0];\n    let hours = parseInt(minute / 60);\n    let minutes = minute % 60;\n    if (hours !== 0) return hours + \"h \" + minutes + \"min\";else return minutes + \"min\";\n  };\n\n  const convertDate = releaseDate => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let date = releaseDate.split(\"-\");\n    return date[2] + \" \" + months[date[1] - 1] + \" \" + date[0];\n  };\n\n  return React.createElement(\"div\", {\n    className: \"film-details\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"explore-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, seriesData.original_name, React.createElement(\"span\", {\n    className: \"film-details-year\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, `(\n                        ${seriesData.first_air_date ? seriesData.first_air_date.substring(0, 4) : \"\"}\n                        â€“ \n                        ${seriesData.in_production ? \"\" : seriesData.last_air_date ? seriesData.last_air_date.substring(0, 4) : \"\"}\n                        )`)), React.createElement(\"div\", {\n    className: \"film-details-subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    style: {\n      color: \"#ffd701\",\n      fontSize: \"25px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-star\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  })), React.createElement(\"span\", {\n    className: \"film-details-subtext-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, seriesData.vote_average, \"/10\"), React.createElement(\"span\", {\n    style: {\n      margin: \"0px 10px\",\n      fontSize: \"14pt\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"|\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, seriesTime), React.createElement(\"span\", {\n    style: {\n      margin: \"0px 10px\",\n      fontSize: \"14pt\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"|\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, seriesGenres.length > 0 ? seriesGenres.join(\", \") : \"\"), React.createElement(\"span\", {\n    style: {\n      margin: \"0px 10px\",\n      fontSize: \"14pt\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"|\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, seriesDate)), React.createElement(\"div\", {\n    className: \"film-details-media\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: `https://image.tmdb.org/t/p/w200` + seriesData.poster_path,\n    className: \"explore-image m-0\",\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), React.createElement(YouTube, {\n    className: \"film-details-video\",\n    video: seriesVideo,\n    width: \"477px\",\n    height: \"268px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"film-details-overview\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, seriesData.overview), React.createElement(\"div\", {\n    className: \"film-cast-short\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    style: {\n      fontWeight: \"bold\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Creators: \"), creators.join(\", \"), React.createElement(SeriesCast, {\n    id: seriesData.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/home/harish/mn9/repo/test/-MS_Imdb_Monoceros_Tep_Hyderabad_Part-time_2020_2/src/components/SeriesDetails.js"],"names":["React","useState","useEffect","axios","YouTube","SeriesCast","SeriesDetails","props","seriesData","setSeriesData","seriesVideo","setSeriesVideo","seriesGenres","setSeriesGenres","seriesTime","setSeriesTime","seriesDate","setSeriesDate","creators","setCreators","length","getData","getSeriesVideo","parseInt","id","data","get","genres","splice","map","genre","push","name","convertTime","episode_run_time","convertDate","first_air_date","created_by","person","type","results","site","key","minute","hours","minutes","releaseDate","months","date","split","original_name","substring","in_production","last_air_date","color","fontSize","vote_average","margin","join","poster_path","overview","fontWeight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport YouTube from '@u-wave/react-youtube'\nimport SeriesCast from './SeriesCast'\n\nexport default function SeriesDetails(props) {\n\n    const [seriesData, setSeriesData] = useState([])\n    const [seriesVideo, setSeriesVideo] = useState(\"\")\n    const [seriesGenres, setSeriesGenres] = useState(\"\")\n    const [seriesTime, setSeriesTime] = useState(\"\")\n    const [seriesDate, setSeriesDate] = useState(\"\")\n    const [creators, setCreators] = useState([])\n\n    useEffect(() => {\n        if(seriesData.length === 0){\n            getData()\n            getSeriesVideo()\n        }\n        //if movie changed\n        if(parseInt(seriesData.id) !== parseInt(props.id))\n            getData()\n            getSeriesVideo()\n    })\n\n    const getData = async () => {\n        const data = await axios.get(`https://api.themoviedb.org/3/tv/${props.id}?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8&language=en-US`)\n        setSeriesData(data.data)\n        const genres = []\n        data.data.genres.splice(0,2).map(genre => {\n            return genres.push(genre.name)\n        })\n        setSeriesGenres(genres)\n        setSeriesTime(convertTime(data.data.episode_run_time))\n        setSeriesDate(convertDate(data.data.first_air_date))\n        const creators = []\n        data.data.created_by.splice(0,3).map(person => {\n            return creators.push(person.name)\n        })\n        setCreators(creators)\n    }\n\n    const getSeriesVideo = async () => {\n        const data = await axios.get(`https://api.themoviedb.org/3/${props.type}/${props.id}/videos?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8&language=en-US`)\n        if(data.data.results[0].site === \"YouTube\")\n            setSeriesVideo(data.data.results[0].key)\n    }\n\n    const convertTime = (minute) => {\n        minute = minute[0]\n        let hours = parseInt(minute / 60)\n        let minutes = minute % 60\n        if(hours !== 0)\n            return hours + \"h \" + minutes + \"min\"\n        else\n            return minutes + \"min\"\n    }\n\n    const convertDate = (releaseDate) => {\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n        let date = releaseDate.split(\"-\")\n        return date[2] + \" \" + months[date[1] - 1] + \" \" + date[0]\n    }\n\n    return (\n        <div className=\"film-details\">\n            <h1 className=\"explore-text\">{seriesData.original_name} \n                <span className=\"film-details-year\">\n                    {\n                        `(\n                        ${(seriesData.first_air_date) ? (seriesData.first_air_date).substring(0,4) : \"\"}\n                        â€“ \n                        ${seriesData.in_production ? \"\" : (seriesData.last_air_date) ? seriesData.last_air_date.substring(0,4): \"\"}\n                        )`\n                    }\n                </span>\n            </h1>\n            <div className=\"film-details-subtext\">\n                <span style={{color: \"#ffd701\", fontSize: \"25px\"}}><i className=\"fas fa-star\"></i></span>\n                <span className=\"film-details-subtext-text\">{seriesData.vote_average}/10</span>\n                <span style={{margin: \"0px 10px\", fontSize: \"14pt\"}}>|</span>\n                <span>{seriesTime}</span>\n                <span style={{margin: \"0px 10px\", fontSize: \"14pt\"}}>|</span>\n                <span>{ seriesGenres.length > 0 ? seriesGenres.join(\", \") : \"\" }</span>\n                <span style={{margin: \"0px 10px\", fontSize: \"14pt\"}}>|</span>\n                <span>{seriesDate}</span>\n            </div>\n            <div className=\"film-details-media\">            \n                <img src={`https://image.tmdb.org/t/p/w200`+seriesData.poster_path} className = \"explore-image m-0\" alt=\"\"/>\n                <YouTube className=\"film-details-video\"\n                    video={seriesVideo}\n                    width=\"477px\"\n                    height=\"268px\"\n                />\n            </div>\n\n            <div className=\"film-details-overview\">{seriesData.overview}</div>\n            <div className=\"film-cast-short\">\n                <span style={{fontWeight: \"bold\"}}>Creators: </span>\n                {creators.join(\", \")}\n                <SeriesCast id={seriesData.id}/>\n            </div>\n            \n\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}