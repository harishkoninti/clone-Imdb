{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\haris\\\\Documents\\\\clone-Imdb\\\\src\\\\components\\\\SeriesDetails.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport YouTube from '@u-wave/react-youtube';\nimport SeriesCast from './SeriesCast';\nexport default function SeriesDetails(props) {\n  const [seriesData, setSeriesData] = useState([]);\n  const [seriesVideo, setSeriesVideo] = useState(\"\");\n  const [seriesGenres, setSeriesGenres] = useState(\"\");\n  const [seriesTime, setSeriesTime] = useState(\"\");\n  const [seriesDate, setSeriesDate] = useState(\"\");\n  const [creators, setCreators] = useState([]);\n  useEffect(() => {\n    if (seriesData.length === 0) {\n      getData();\n      getSeriesVideo();\n    }\n    //if movie changed\n    if (parseInt(seriesData.id) !== parseInt(props.id)) getData();\n    getSeriesVideo();\n  });\n  const getData = async () => {\n    const data = await axios.get(`https://api.themoviedb.org/3/tv/${props.id}?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8&language=en-US`);\n    setSeriesData(data.data);\n    const genres = [];\n    data.data.genres.splice(0, 2).map(genre => {\n      return genres.push(genre.name);\n    });\n    setSeriesGenres(genres);\n    setSeriesTime(convertTime(data.data.episode_run_time));\n    setSeriesDate(convertDate(data.data.first_air_date));\n    const creators = [];\n    data.data.created_by.splice(0, 3).map(person => {\n      return creators.push(person.name);\n    });\n    setCreators(creators);\n  };\n  const getSeriesVideo = async () => {\n    const data = await axios.get(`https://api.themoviedb.org/3/${props.type}/${props.id}/videos?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8&language=en-US`);\n    if (data.data.results[0].site === \"YouTube\") setSeriesVideo(data.data.results[0].key);\n  };\n  const convertTime = minute => {\n    minute = minute[0];\n    let hours = parseInt(minute / 60);\n    let minutes = minute % 60;\n    if (hours !== 0) return hours + \"h \" + minutes + \"min\";else return minutes + \"min\";\n  };\n  const convertDate = releaseDate => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let date = releaseDate.split(\"-\");\n    return date[2] + \" \" + months[date[1] - 1] + \" \" + date[0];\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"film-details\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"explore-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, seriesData.original_name, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"film-details-year\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, `(\n                        ${seriesData.first_air_date ? seriesData.first_air_date.substring(0, 4) : \"\"}\n                        â€“ \n                        ${seriesData.in_production ? \"\" : seriesData.last_air_date ? seriesData.last_air_date.substring(0, 4) : \"\"}\n                        )`)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"film-details-subtext\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: \"#ffd701\",\n      fontSize: \"25px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-star\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 68\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"film-details-subtext-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, seriesData.vote_average, \"/10\"), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      margin: \"0px 10px\",\n      fontSize: \"14pt\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, \"|\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, seriesTime), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      margin: \"0px 10px\",\n      fontSize: \"14pt\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, \"|\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, seriesGenres.length > 0 ? seriesGenres.join(\", \") : \"\"), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      margin: \"0px 10px\",\n      fontSize: \"14pt\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, \"|\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, seriesDate)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"film-details-media\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: `https://image.tmdb.org/t/p/w200` + seriesData.poster_path,\n    className: \"explore-image m-0\",\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(YouTube, {\n    className: \"film-details-video\",\n    video: seriesVideo,\n    width: \"477px\",\n    height: \"268px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"film-details-overview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, seriesData.overview), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"film-cast-short\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      fontWeight: \"bold\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, \"Creators: \"), creators.join(\", \"), /*#__PURE__*/React.createElement(SeriesCast, {\n    id: seriesData.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  })));\n}","map":{"version":3,"names":["React","useState","useEffect","axios","YouTube","SeriesCast","SeriesDetails","props","seriesData","setSeriesData","seriesVideo","setSeriesVideo","seriesGenres","setSeriesGenres","seriesTime","setSeriesTime","seriesDate","setSeriesDate","creators","setCreators","length","getData","getSeriesVideo","parseInt","id","data","get","genres","splice","map","genre","push","name","convertTime","episode_run_time","convertDate","first_air_date","created_by","person","type","results","site","key","minute","hours","minutes","releaseDate","months","date","split","original_name","substring","in_production","last_air_date","color","fontSize","vote_average","margin","join","poster_path","overview","fontWeight"],"sources":["C:/Users/haris/Documents/clone-Imdb/src/components/SeriesDetails.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport YouTube from '@u-wave/react-youtube'\r\nimport SeriesCast from './SeriesCast'\r\n\r\nexport default function SeriesDetails(props) {\r\n\r\n    const [seriesData, setSeriesData] = useState([])\r\n    const [seriesVideo, setSeriesVideo] = useState(\"\")\r\n    const [seriesGenres, setSeriesGenres] = useState(\"\")\r\n    const [seriesTime, setSeriesTime] = useState(\"\")\r\n    const [seriesDate, setSeriesDate] = useState(\"\")\r\n    const [creators, setCreators] = useState([])\r\n\r\n    useEffect(() => {\r\n        if(seriesData.length === 0){\r\n            getData()\r\n            getSeriesVideo()\r\n        }\r\n        //if movie changed\r\n        if(parseInt(seriesData.id) !== parseInt(props.id))\r\n            getData()\r\n            getSeriesVideo()\r\n    })\r\n\r\n    const getData = async () => {\r\n        const data = await axios.get(`https://api.themoviedb.org/3/tv/${props.id}?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8&language=en-US`)\r\n        setSeriesData(data.data)\r\n        const genres = []\r\n        data.data.genres.splice(0,2).map(genre => {\r\n            return genres.push(genre.name)\r\n        })\r\n        setSeriesGenres(genres)\r\n        setSeriesTime(convertTime(data.data.episode_run_time))\r\n        setSeriesDate(convertDate(data.data.first_air_date))\r\n        const creators = []\r\n        data.data.created_by.splice(0,3).map(person => {\r\n            return creators.push(person.name)\r\n        })\r\n        setCreators(creators)\r\n    }\r\n\r\n    const getSeriesVideo = async () => {\r\n        const data = await axios.get(`https://api.themoviedb.org/3/${props.type}/${props.id}/videos?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8&language=en-US`)\r\n        if(data.data.results[0].site === \"YouTube\")\r\n            setSeriesVideo(data.data.results[0].key)\r\n    }\r\n\r\n    const convertTime = (minute) => {\r\n        minute = minute[0]\r\n        let hours = parseInt(minute / 60)\r\n        let minutes = minute % 60\r\n        if(hours !== 0)\r\n            return hours + \"h \" + minutes + \"min\"\r\n        else\r\n            return minutes + \"min\"\r\n    }\r\n\r\n    const convertDate = (releaseDate) => {\r\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n        let date = releaseDate.split(\"-\")\r\n        return date[2] + \" \" + months[date[1] - 1] + \" \" + date[0]\r\n    }\r\n\r\n    return (\r\n        <div className=\"film-details\">\r\n            <h1 className=\"explore-text\">{seriesData.original_name} \r\n                <span className=\"film-details-year\">\r\n                    {\r\n                        `(\r\n                        ${(seriesData.first_air_date) ? (seriesData.first_air_date).substring(0,4) : \"\"}\r\n                        â€“ \r\n                        ${seriesData.in_production ? \"\" : (seriesData.last_air_date) ? seriesData.last_air_date.substring(0,4): \"\"}\r\n                        )`\r\n                    }\r\n                </span>\r\n            </h1>\r\n            <div className=\"film-details-subtext\">\r\n                <span style={{color: \"#ffd701\", fontSize: \"25px\"}}><i className=\"fas fa-star\"></i></span>\r\n                <span className=\"film-details-subtext-text\">{seriesData.vote_average}/10</span>\r\n                <span style={{margin: \"0px 10px\", fontSize: \"14pt\"}}>|</span>\r\n                <span>{seriesTime}</span>\r\n                <span style={{margin: \"0px 10px\", fontSize: \"14pt\"}}>|</span>\r\n                <span>{ seriesGenres.length > 0 ? seriesGenres.join(\", \") : \"\" }</span>\r\n                <span style={{margin: \"0px 10px\", fontSize: \"14pt\"}}>|</span>\r\n                <span>{seriesDate}</span>\r\n            </div>\r\n            <div className=\"film-details-media\">            \r\n                <img src={`https://image.tmdb.org/t/p/w200`+seriesData.poster_path} className = \"explore-image m-0\" alt=\"\"/>\r\n                <YouTube className=\"film-details-video\"\r\n                    video={seriesVideo}\r\n                    width=\"477px\"\r\n                    height=\"268px\"\r\n                />\r\n            </div>\r\n\r\n            <div className=\"film-details-overview\">{seriesData.overview}</div>\r\n            <div className=\"film-cast-short\">\r\n                <span style={{fontWeight: \"bold\"}}>Creators: </span>\r\n                {creators.join(\", \")}\r\n                <SeriesCast id={seriesData.id}/>\r\n            </div>\r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}