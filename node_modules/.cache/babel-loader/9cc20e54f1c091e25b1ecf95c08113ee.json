{"ast":null,"code":"var _jsxFileName = \"/home/harish/mn9/repo/test/-MS_Imdb_Monoceros_Tep_Hyderabad_Part-time_2020_2/src/components/FilmDetails.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport YouTube from '@u-wave/react-youtube';\nimport FilmCast from './FilmCast';\nexport default function FilmDetails(props) {\n  const [filmData, setFilmData] = useState([]);\n  const [filmVideo, setFilmVideo] = useState(\"\");\n  const [filmGenres, setFilmGenres] = useState(\"\");\n  const [filmTime, setFilmTime] = useState(\"\");\n  const [filmDate, setFilmDate] = useState(\"\");\n  useEffect(() => {\n    if (filmData.length === 0) {\n      getData();\n      getFilmVideo();\n    } //if movie changed\n\n\n    if (parseInt(filmData.id) !== parseInt(props.id)) getData();\n    getFilmVideo();\n  });\n\n  const getData = async () => {\n    const data = await axios.get(`https://api.themoviedb.org/3/movie/${props.id}?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8&language=en-US`);\n    setFilmData(data.data);\n    const genres = [];\n    data.data.genres.splice(0, 2).map(genre => {\n      return genres.push(genre.name);\n    });\n    setFilmGenres(genres);\n    setFilmTime(convertTime(data.data.runtime));\n    setFilmDate(convertDate(data.data.release_date));\n  };\n\n  const getFilmVideo = async () => {\n    const data = await axios.get(`https://api.themoviedb.org/3/movie/${props.id}/videos?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8&language=en-US`);\n    if (data.data.results[0].site === \"YouTube\") setFilmVideo(data.data.results[0].key);\n  };\n\n  const convertTime = minute => {\n    let hours = parseInt(minute / 60);\n    let minutes = minute % 60;\n    return hours + \"h \" + minutes + \"min\";\n  };\n\n  const convertDate = releaseDate => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let date = releaseDate.split(\"-\");\n    return date[2] + \" \" + months[date[1] - 1] + \" \" + date[0];\n  };\n\n  return React.createElement(\"div\", {\n    className: \"film-details\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"explore-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, filmData.title, React.createElement(\"span\", {\n    className: \"film-details-year\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, `(${filmData.release_date ? filmData.release_date.substring(0, 4) : \"\"})`)), React.createElement(\"div\", {\n    className: \"film-details-subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    style: {\n      color: \"#ffd701\",\n      fontSize: \"25px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-star\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })), React.createElement(\"span\", {\n    className: \"film-details-subtext-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, filmData.vote_average, \"/10\"), React.createElement(\"span\", {\n    style: {\n      margin: \"0px 10px\",\n      fontSize: \"14pt\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"|\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, filmTime), React.createElement(\"span\", {\n    style: {\n      margin: \"0px 10px\",\n      fontSize: \"14pt\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"|\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, filmGenres[0] + \", \" + filmGenres[1]), React.createElement(\"span\", {\n    style: {\n      margin: \"0px 10px\",\n      fontSize: \"14pt\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"|\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, filmDate)), React.createElement(\"div\", {\n    className: \"film-details-media\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: `https://image.tmdb.org/t/p/w200` + filmData.poster_path,\n    className: \"explore-image m-0\",\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(YouTube, {\n    className: \"film-details-video\",\n    video: filmVideo,\n    width: \"477px\",\n    height: \"268px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"film-details-overview\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, filmData.overview), React.createElement(FilmCast, {\n    id: filmData.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/home/harish/mn9/repo/test/-MS_Imdb_Monoceros_Tep_Hyderabad_Part-time_2020_2/src/components/FilmDetails.js"],"names":["React","useState","useEffect","axios","YouTube","FilmCast","FilmDetails","props","filmData","setFilmData","filmVideo","setFilmVideo","filmGenres","setFilmGenres","filmTime","setFilmTime","filmDate","setFilmDate","length","getData","getFilmVideo","parseInt","id","data","get","genres","splice","map","genre","push","name","convertTime","runtime","convertDate","release_date","results","site","key","minute","hours","minutes","releaseDate","months","date","split","title","substring","color","fontSize","vote_average","margin","poster_path","overview"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport YouTube from '@u-wave/react-youtube'\nimport FilmCast from './FilmCast'\n\nexport default function FilmDetails(props) {\n\n    const [filmData, setFilmData] = useState([])\n    const [filmVideo, setFilmVideo] = useState(\"\")\n    const [filmGenres, setFilmGenres] = useState(\"\")\n    const [filmTime, setFilmTime] = useState(\"\")\n    const [filmDate, setFilmDate] = useState(\"\")\n\n    useEffect(() => {\n        if(filmData.length === 0){\n            getData()\n            getFilmVideo()\n        }\n        //if movie changed\n        if(parseInt(filmData.id) !== parseInt(props.id))\n            getData()\n            getFilmVideo()\n    })\n\n    const getData = async () => {\n        const data = await axios.get(`https://api.themoviedb.org/3/movie/${props.id}?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8&language=en-US`)\n        setFilmData(data.data)\n        const genres = []\n        data.data.genres.splice(0,2).map(genre => {\n            return genres.push(genre.name)\n        })\n        setFilmGenres(genres)\n        setFilmTime(convertTime(data.data.runtime))\n        setFilmDate(convertDate(data.data.release_date))\n    }\n\n    const getFilmVideo = async () => {\n        const data = await axios.get(`https://api.themoviedb.org/3/movie/${props.id}/videos?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8&language=en-US`)\n        if(data.data.results[0].site === \"YouTube\")\n            setFilmVideo(data.data.results[0].key)\n    }\n\n    const convertTime = (minute) => {\n        let hours = parseInt(minute / 60)\n        let minutes = minute % 60\n        return hours + \"h \" + minutes + \"min\"\n    }\n\n    const convertDate = (releaseDate) => {\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n        let date = releaseDate.split(\"-\")\n        return date[2] + \" \" + months[date[1] - 1] + \" \" + date[0]\n    }\n\n    return (\n        <div className=\"film-details\">\n            <h1 className=\"explore-text\">{filmData.title} \n                <span className=\"film-details-year\">{`(${filmData.release_date ? filmData.release_date.substring(0,4) : \"\"})`}</span>\n            </h1>\n            <div className=\"film-details-subtext\">\n                <span style={{color: \"#ffd701\", fontSize: \"25px\"}}><i className=\"fas fa-star\"></i></span>\n                <span className=\"film-details-subtext-text\">{filmData.vote_average}/10</span>\n                <span style={{margin: \"0px 10px\", fontSize: \"14pt\"}}>|</span>\n                <span>{filmTime}</span>\n                <span style={{margin: \"0px 10px\", fontSize: \"14pt\"}}>|</span>\n                <span>{ filmGenres[0] + \", \" + filmGenres[1] }</span>\n                <span style={{margin: \"0px 10px\", fontSize: \"14pt\"}}>|</span>\n                <span>{filmDate}</span>\n            </div>\n            <div className=\"film-details-media\">            \n                <img src={`https://image.tmdb.org/t/p/w200`+filmData.poster_path} className = \"explore-image m-0\" alt=\"\"/>\n                <YouTube className=\"film-details-video\"\n                    video={filmVideo}\n                    width=\"477px\"\n                    height=\"268px\"\n                />\n            </div>\n\n            <div className=\"film-details-overview\">{filmData.overview}</div>\n            <FilmCast id={filmData.id}/>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}