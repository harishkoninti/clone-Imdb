{"ast":null,"code":"var _jsxFileName = \"/home/harish/mn9/repo/test/-MS_Imdb_Monoceros_Tep_Hyderabad_Part-time_2020_2/src/components/Explore.js\";\nimport React, { useState, useEffect } from 'react';\nimport ExploreCategory from './ExploreCategory';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom'; //const filterCounter = 0\n\nconst topMovies2019URL = \"https://api.themoviedb.org/3/discover/movie?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8&language=en-US&sort_by=vote_average.desc&page=1&primary_release_year=2019&vote_count.gte=2000&with_original_language=en\";\nconst trendingsURL = \"https://api.themoviedb.org/3/trending/movie/week?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8\";\nconst topRatedMoviesURL = \"https://api.themoviedb.org/3/discover/movie?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8&language=en-US&sort_by=vote_average.desc&include_adult=false&include_video=false&page=1&vote_count.gte=10000&with_original_language=en\";\nconst topRatedSeriesURL = \"https://api.themoviedb.org/3/discover/tv?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8&language=en-US&sort_by=vote_average.desc&page=1&vote_count.gte=500&include_null_first_air_dates=false\";\nconst topSeries2019URL = \"https://api.themoviedb.org/3/discover/tv?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8&language=en-US&sort_by=vote_average.desc&first_air_date_year=2019&page=1&vote_count.gte=500&include_null_first_air_dates=false\";\nexport default function Explore() {\n  const [searchText, setSearchText] = useState(\"\");\n  const [searchedMovies, setSearchedMovies] = useState([]);\n  const [isSearched, setIsSearched] = useState(false);\n\n  const handleChange = event => {\n    if (event.target.value !== searchText) {\n      setSearchText(event.target.value);\n      setIsSearched(true);\n    }\n  };\n\n  useEffect(() => {\n    if (isSearched !== false) getData();\n  });\n\n  const getData = async () => {\n    const films = await axios.get(\"https://api.themoviedb.org/3/search/multi?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8&language=en-US&query=\" + searchText + \"&page=1&include_adult=false\");\n    const tempArray = [];\n    films.data.results.splice(0, 20).map(film => {\n      film.poster_path !== undefined && film.poster_path !== null ? tempArray.push(film) : void 0;\n      return true;\n    });\n\n    if (tempArray.length !== searchedMovies) {\n      setSearchedMovies(tempArray);\n      setIsSearched(false);\n    }\n  };\n\n  console.log(searchedMovies);\n  return React.createElement(\"div\", {\n    className: \"explore\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"explore-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Explore\"), React.createElement(\"div\", {\n    className: \"search-filters-bar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"form-control search-box\",\n    type: \"text\",\n    placeholder: \"Search\",\n    \"aria-label\": \"Search\",\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"filter-counter\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"0\"), React.createElement(\"span\", {\n    className: \"font-weight-bold\",\n    style: {\n      margin: \"auto\",\n      marginLeft: \"10px\",\n      cursor: \"pointer\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"All Filters\")), searchText.length === 0 ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(ExploreCategory, {\n    title: \"Trendings\",\n    apiURL: trendingsURL,\n    type: \"movie\",\n    link: \"trendings\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(ExploreCategory, {\n    title: \"Top Movies 2019\",\n    apiURL: topMovies2019URL,\n    type: \"movie\",\n    link: \"top-movies-2019\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(ExploreCategory, {\n    title: \"Top Rated Movies\",\n    apiURL: topRatedMoviesURL,\n    type: \"movie\",\n    link: \"top-rated-movies\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(ExploreCategory, {\n    title: \"Top TV Series 2019\",\n    apiURL: topSeries2019URL,\n    type: \"tv\",\n    link: \"top-series-2019\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(ExploreCategory, {\n    title: \"Top Rated TV Series\",\n    apiURL: topRatedSeriesURL,\n    type: \"tv\",\n    link: \"top-rated-series\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })) : React.createElement(\"div\", {\n    className: \"row explore-row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, searchedMovies.map(film => {\n    return React.createElement(\"div\", {\n      key: film.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: `/details/${film.media_type}/${film.id}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: `https://image.tmdb.org/t/p/w200` + film.poster_path,\n      className: \"explore-image\",\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    })));\n  })));\n}","map":{"version":3,"sources":["/home/harish/mn9/repo/test/-MS_Imdb_Monoceros_Tep_Hyderabad_Part-time_2020_2/src/components/Explore.js"],"names":["React","useState","useEffect","ExploreCategory","axios","Link","topMovies2019URL","trendingsURL","topRatedMoviesURL","topRatedSeriesURL","topSeries2019URL","Explore","searchText","setSearchText","searchedMovies","setSearchedMovies","isSearched","setIsSearched","handleChange","event","target","value","getData","films","get","tempArray","data","results","splice","map","film","poster_path","undefined","push","length","console","log","margin","marginLeft","cursor","id","media_type"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport ExploreCategory from './ExploreCategory'\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\n\n//const filterCounter = 0\n\nconst topMovies2019URL = \"https://api.themoviedb.org/3/discover/movie?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8&language=en-US&sort_by=vote_average.desc&page=1&primary_release_year=2019&vote_count.gte=2000&with_original_language=en\"\nconst trendingsURL = \"https://api.themoviedb.org/3/trending/movie/week?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8\"\nconst topRatedMoviesURL = \"https://api.themoviedb.org/3/discover/movie?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8&language=en-US&sort_by=vote_average.desc&include_adult=false&include_video=false&page=1&vote_count.gte=10000&with_original_language=en\"\nconst topRatedSeriesURL = \"https://api.themoviedb.org/3/discover/tv?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8&language=en-US&sort_by=vote_average.desc&page=1&vote_count.gte=500&include_null_first_air_dates=false\"\nconst topSeries2019URL = \"https://api.themoviedb.org/3/discover/tv?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8&language=en-US&sort_by=vote_average.desc&first_air_date_year=2019&page=1&vote_count.gte=500&include_null_first_air_dates=false\"\n\nexport default function Explore() {\n\n    const [searchText, setSearchText] = useState(\"\")\n    const [searchedMovies, setSearchedMovies] = useState([])\n    const [isSearched, setIsSearched] = useState(false)\n\n    const handleChange = (event) =>{\n        if(event.target.value !== searchText){\n            setSearchText(event.target.value)\n            setIsSearched(true)\n        }\n    }\n\n    useEffect(() => {\n        if(isSearched !== false)\n            getData()\n    })\n\n    const getData = async () => {\n        const films = await axios.get(\"https://api.themoviedb.org/3/search/multi?api_key=ee5e74e39e7bb0a1514fd8909bbd92f8&language=en-US&query=\"+searchText+\"&page=1&include_adult=false\")\n        const tempArray = []\n        films.data.results.splice(0,20).map(film => {\n            film.poster_path !== undefined && film.poster_path !== null ? tempArray.push(film) : void(0)\n            return true;\n        })\n        if(tempArray.length !== searchedMovies){\n            setSearchedMovies(tempArray)\n            setIsSearched(false)\n        }\n    }\n    console.log(searchedMovies)\n    return (\n        <div className=\"explore\">\n            <h1 className=\"explore-text\">Explore</h1>\n            <div className=\"search-filters-bar\">\n                <input className=\"form-control search-box\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\" onChange={handleChange}></input>\n                <span className=\"filter-counter\">0</span>\n                <span className=\"font-weight-bold\" style={{margin:\"auto\",marginLeft:\"10px\",cursor:\"pointer\"}}>All Filters</span>\n            </div>\n            {\n                searchText.length === 0 ? \n                (\n                <div>\n                    <ExploreCategory title=\"Trendings\" apiURL={trendingsURL} type=\"movie\" link=\"trendings\"/>\n                    <ExploreCategory title=\"Top Movies 2019\" apiURL={topMovies2019URL} type=\"movie\" link=\"top-movies-2019\"/>\n                    <ExploreCategory title=\"Top Rated Movies\" apiURL={topRatedMoviesURL} type=\"movie\" link=\"top-rated-movies\"/>\n                    <ExploreCategory title=\"Top TV Series 2019\" apiURL={topSeries2019URL} type=\"tv\" link=\"top-series-2019\"/>\n                    <ExploreCategory title=\"Top Rated TV Series\" apiURL={topRatedSeriesURL} type=\"tv\" link=\"top-rated-series\"/>\n                </div>\n                )\n                :\n                (\n                <div className=\"row explore-row\">\n                    {\n                        searchedMovies.map(film => {\n                            return(\n                                <div key={film.id}>\n                                    <Link to={`/details/${film.media_type}/${film.id}`}>\n                                        <img src={`https://image.tmdb.org/t/p/w200`+film.poster_path} className = \"explore-image\" alt=\"\"/>\n                                    </Link>\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n                )\n            }\n            \n\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}